parseTuringMachine : [Char] -> [U16 * U32 * U16 * U32 * U8] + Unit
parseTuringMachine := \str. 
    case (parseTuringCell str)
    (\cl. case (parseTwoOnes (snd (snd (snd (snd (snd cl))))))
        (\strr. case (parseTuringMachine strr)
            (\arr. inl (cons 
                (tuple (fst cl)
                (tuple (fst (snd cl))
                (tuple (fst (snd (snd cl)))
                (tuple (fst (snd (snd (snd cl))))
                    (fst (snd (snd (snd (snd cl)))))))))
                arr))
            (\u. inr unit))
        (\u. inl (cons 
                (tuple (fst cl)
                (tuple (fst (snd cl))
                (tuple (fst (snd (snd cl)))
                (tuple (fst (snd (snd (snd cl))))
                    (fst (snd (snd (snd (snd cl)))))))))
                emptyList)))
    (\u. inr unit)

parseTwoOnes : [Char] -> [Char] + Unit
parseTwoOnes := \str.
    case (uncons str)
    (\xxs. if (iseq_char '1' (fst xxs))
        then inl (snd xxs)
        else inr unit)
    (\u. inr unit)

parseTuringCell : [Char] -> U16 * U32 * U16 * U32 * U8 * [Char] + Unit
parseTuringCell := \str.
    case (parseTuringValue str)
    (\tvcSt. case (parseTuringValue (snd tvcSt))
        (\tvcRd. case (parseTuringValue (snd tvcRd))
            (\tvcNSt. case (parseTuringValue (snd tvcNSt))
                (\tvcWrt. case (parseTuringValue (snd tvcWrt))
                    (\tvcG. inl
                        (tuple (u32Tou16 (fst tvcSt))
                        (tuple (fst tvcRd)
                        (tuple (u32Tou16 (fst tvcNSt))
                        (tuple (fst tvcWrt)
                        (tuple (u32Tou8 (fst tvcG)) (snd tvcG)))))))
                    (\u. inr unit))
                (\u. inr unit))
            (\u. inr unit))
        (\u. inr unit))
    (\u. inr unit)


parseTuringValue : [Char] -> U32 * [Char] + Unit
parseTuringValue := \str. 
    case (uncons str) 
    (\xxs. if (iseq_char '0' (fst xxs))
        then inl (parseTuringValue1 (snd xxs) 1u32)
        else inr unit)
    (\u. inr unit)

parseTuringValue1 : [Char] -> U32 -> U32 * [Char]
parseTuringValue1 := \str.\n.
    case (uncons str)
    (\xxs. if (iseq_char '0' (fst xxs))
        then (parseTuringValue1 (snd xxs) (add_u32 1u32 n))
        else (tuple n (snd xxs)))
    (\u. tuple n emptyList)

let : a -> (a -> b) -> b
let := \a.\f. f a

cmp : (a -> b) -> (b -> c) -> a -> c
cmp := \g.\f.\x. f (g x)

printSp : a -> a
printSp := print_char ' '

printArrow : a -> a
printArrow := cmp printSp (
    cmp (print_char ':') 
    (cmp (print_char '>') printSp))

printDir : U8 -> a -> a
printDir := \d. if iseq_u8 d 1u8
    then cmp (print_char '-') (print_char '>')
    else if iseq_u8 d 2u8
    then cmp (print_char '-') (print_char '-')
    else cmp (print_char '<') (print_char '-')

lf : I32
lf := 10i32

lfc : Char
lfc := i32Tochar lf

printLn : a -> a
printLn := print_char lfc

printTuringMachine : [U16 * U32 * U16 * U32 * U8] -> a -> a
printTuringMachine := \tms.
    case (uncons tms)
    (\tmx. cmp (printTuringMachine1 (fst tmx)) (printTuringMachine (snd tmx)))
    (\u.\x.x)

printTuringMachine1 : U16 * U32 * U16 * U32 * U8 -> a -> a
printTuringMachine1 := \tmg.
    cmp (print_u16 (fst tmg))
    (cmp printSp
    (cmp (print_u32 (fst (snd tmg)))
    (cmp printArrow
    (cmp (print_u16 (fst (snd (snd tmg))))
    (cmp printSp
    (cmp (print_u32 (fst (snd (snd (snd tmg)))))
    (cmp printSp
    (cmp (printDir (snd (snd (snd (snd tmg))))) printLn
    ))))))))

true := 1bool
false := 0bool

or : Bool -> Bool -> Bool
or := \a.\b. if a then true else b

and : Bool -> Bool -> Bool
and := \a.\b. if a then b else false

getLine : [Char]
getLine := let getchar 
    (\c. if or (iseq_i32 c lf) (iseq_i32 c eof)
         then emptyList
         else cons (i32Tochar c) getLine
    )

arrLength : [a] -> I32
arrLength := \arr.
    case (uncons arr)
    (\xs. add_i32 1i32 (arrLength (snd xs)))
    (\u. 0i32)

printLine : [Char] -> a -> a
printLine := \list. case (uncons list)
    (\xs. cmp (print_char (fst xs)) (printLine (snd xs)))
    (\u. printLn)

appendList : a -> [a] -> [a]
appendList := \x.\xs. case (uncons xs)
    (\xs. cons (fst xs) (appendList x (snd xs)))
    (\u. cons x emptyList)

turingAppend : [U32] -> [U32]
turingAppend := appendList 1u32

turingPrepend : [U32] -> [U32]
turingPrepend := cons 1u32

startTuringState : U16 * U32 * [U32]
startTuringState := tuple 1u16 (tuple 0u32 emptyList)

find : (a -> Bool) -> [a] -> a + Unit
find := \pred.\list.
    case (uncons list)
    (\xs. if pred (fst xs)
        then inl (fst xs)
        else find pred (snd xs))
    (\u. inr unit)

turingIndexList : U32 -> [U32] -> U32
turingIndexList := \i.\list.
    case (uncons list)
    (\xs. if iseq_u32 i 0u32
        then fst xs
        else turingIndexList (sub_u32 1u32 i) (snd xs))
    (\u. 1u32)

turingRead : U16 * U32 * [U32] -> U32
turingRead := \state. turingIndexList (fst (snd state)) (snd (snd state))

turingState : U16 * U32 * [U32] -> U16
turingState := fst

turingLookup : [U16 * U32 * U16 * U32 * U8] -> U16 -> U32 -> U16 * U32 * U8 + Unit
turingLookup := \tm.\state.\symbol.
    case (find (\tmc. and (iseq_u16 (fst tmc) state) (iseq_u32 (fst (snd tmc)) symbol)) tm)
    (\x. inl 
        (tuple (fst (snd (snd x)))
        (tuple (fst (snd (snd (snd x))))
        (snd (snd (snd (snd x)))))))
    (\u. inr unit)

turingAction : U16 * U32 * U8 -> U16 * U32 * [U32] -> U16 * U32 * [U32]

turingStep : U8 -> U16 * U32 * [U32] -> U16 * U32 * [U32]
turingStep := \dir.\state.
    tuple (fst state) (
        if islt_u32 (fst (snd state)) (arrLength (snd (snd state))) 
        then 

main := let getLine \l. 
    case (parseTuringMachine l)
    (\tm. let (print_i32 (arrLength tm) 0i8) 
        \ll. let (printLn ll)
        \ll. printTuringMachine tm ll)
    (\u. print_char 'e' 0i8)
